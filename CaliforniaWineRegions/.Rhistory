### -----------------------------------------------
### -- Determine appropriate regions to show
# Library to read csv files
library(csv)
# Read in the reviews
wine_reviews <- read.csv("./data/reviews/winemag-data-130k-v2.csv")
# Only use California data
wine_cali <- wine_reviews[wine_reviews$province=="California",]
# Get the top 20 real wine regions
#  Note: I don't use the 'California' region or individual counties since they don't have shapefiles
wine_region_list <- sort(names(summary(wine_cali[wine_cali$region_1!="California" & !(grepl("County",wine_cali$region_1)),]$region_1)[1:20]))
# Create a subset of the wine_cali data frame
wine_cali_sub <- wine_cali[wine_cali$region_1 %in% wine_region_list,]
# Write the subset to a csv file
write.csv(wine_cali_sub,file="./data/reviews/wine_cali_subset.csv",row.names=F)
# Library to read csv files
library(csv)
# Read in the wine cali file
wine_cali_sub <- read.csv("./data/reviews/wine_cali_subset.csv")
# Recreate the wine_region_list
wine_region_list <- sort(names(summary(wine_cali_sub$region_1)))
# wine_region_codes are the names of the GeoJSON files in the GitHub repo:
# https://github.com/UCDavisLibrary/ava/tree/master/avas
wine_region_codes <- c("alexander_valley",
"anderson_valley",
"los_carneros",
"central_coast",
"dry_creek_valley",
"edna_valley",
"livermore_valley",
"lodi",
"napa_valley",
"paso_robles",
"russian_river_valley",
"rutherford",
"santa_cruz_mountains",
"santa_lucia_highlands",
"santa_maria_valley",
"santa_ynez_valley",
"sierra_foothills",
"sonoma_coast",
"sonoma_valley",
"sta__rita_hills")
# ID for each region
wine_region_id <- 1:length(wine_region_urls)
# ID for each region
wine_region_id <- 1:length(wine_region_codes)
# Create a data frame with average ratings for each region
region_data <- data.frame(wine_region_id)
region_data$region_code <- wine_region_codes
region_data$region_name <- wine_region_list
names(region_data) <- c("region_id","region_code","region_name")
# Insert a new column with average rating
for (i in 1:nrow(region_data)) {
region <- toString(region_data[i,"region_name",])
ratings <- wine_cali_sub[wine_cali_sub$region_1==region,"points"]
region_data[i,"avg_rating"] <- mean(ratings)
}
# Save output as a csv file
write.csv(region_data,file="./data/reviews/region_data.csv",row.names=F)
# Library to read csv files
library(csv)
# Library to download data
library(RCurl)
# Read in the region data
region_data <- read.csv(region_data,file="./data/reviews/region_data.csv",row.names=F)
# Read in the region data
region_data <- read.csv("./data/reviews/region_data.csv",row.names=F)
# Read in the region data
region_data <- read.csv("./data/reviews/region_data.csv")
# Get the urls to download
wine_region_urls <- unique(region_data$region_code)
wine_region_urls
# Get the urls to download
wine_region_urls <- region_data$region_code
wine_region_urls
# Download each file
for (i in 1:length(wine_region_urls)) {
url <- paste(c("https://raw.githubusercontent.com/UCDavisLibrary/ava/master/avas/",wine_region_urls[i],".geojson"),collapse="")
dest <- paste(c("./data/regions/",wine_region_urls[i],".geojson"),collapse="")
download.file(url, destfile=dest, method="libcurl")
}
# Get the urls to download
wine_region_urls <- toString(region_data$region_code)
wine_region_urls
# Get the urls to download
wine_region_urls <- region_data$region_code
wine_region_urls
# Download each file
for (i in 1:length(wine_region_urls)) {
url <- paste(c("https://raw.githubusercontent.com/UCDavisLibrary/ava/master/avas/",wine_region_urls[i],".geojson"),collapse="")
dest <- paste(c("./data/regions/",toString(wine_region_urls[i]),".geojson"),collapse="")
download.file(url, destfile=dest, method="libcurl")
}
wine_region_urls[1]
class(wine_region_urls[1])
toString(wine_region_urls[1])
# Get the urls to download
wine_region_urls <- lapply(region_data$region_code, function(f) toString(f))
wine_region_urls
wine_region_urls[1]
class(wine_region_urls[1])
# Get the urls to download
wine_region_urls <- lapply(region_data$region_code, function(f) toString(f)[1])
wine_region_urls
# Get the urls to download
wine_region_urls <- region_data$region_code
wine_region_urls <- lapply(wine_region_urls, function(f) toString(f))
wine_region_urls
# Get the urls to download
wine_region_urls <- region_data$region_code
# Download each file
for (i in 1:length(wine_region_urls)) {
url <- paste(c("https://raw.githubusercontent.com/UCDavisLibrary/ava/master/avas/",toString(wine_region_urls[i]),".geojson"),collapse="")
dest <- paste(c("./data/regions/",toString(wine_region_urls[i]),".geojson"),collapse="")
download.file(url, destfile=dest, method="libcurl")
}
wine_region_codes <- rep(NA,times=length(wine_region_urls))
# Get the urls to download
wine_region_urls <- region_data$region_code
# Library to read csv files
library(csv)
# Library for spatial data
library(rgdal)
# Read in the region data
region_data <- read.csv("./data/reviews/region_data.csv")
# Get the urls to download
wine_region_urls <- region_data$region_code
wine_region_codes <- rep(NA,times=length(wine_region_urls))
wine_region_codes <- lapply(wine_region_urls, function(f) toString(f))
wine_region_codes
wine_region_codes <- lapply(wine_region_urls, function(f) toString(f)[[1]])
wine_region_codes
wine_region_codes <- rep(NA, times=length(wine_region_urls)
)
wine_region_codes <- rep(NA,times=length(wine_region_urls))
for (i in 1:length(wine_region_urls)) {
wine_region_codes[i] <- toString(wine_region_urls[i])
}
wine_region_codes
# List of files
files <- lapply(wine_region_codes, function(f) paste(c("./data/regions/",f,".geojson"),collapse=""))
files
# Read in the all files
wine_region_shp <- lapply(files, function(f) readOGR(toString(f)))
# Function to extract ava_id and coords from geojson
extract_coords <- function(shp) {
region_id <- toString(shp@data$ava_id)
coords <- shp@polygons[[1]]@Polygons[[1]]@coords
Pl <- Polygon(coords)
Pls <- Polygons(list(Pl),ID=region_id)
return(Pls)
}
# Get all polygons and put in SpatialPolygons object
Pls <- NULL
for (i in 1:length(wine_region_shp)) {
Pls <- c(Pls,extract_coords(wine_region_shp[[i]]))
}
SPls <- SpatialPolygons(Pls)
# Data to put in SpatialPolygonsDataFrame
sp_data <- data.frame(1:length(SPls), region_data$avg_rating, row.names=region_data$region_id)
names(sp_data) <- c("region_id","avg_rating")
# Create the SpatialPolygonsDataFrame
sp_file <- SpatialPolygonsDataFrame(SPls, sp_data)
SPls
# Function to extract ava_id and coords from geojson
extract_coords <- function(shp) {
region_id <- toString(shp@data$ava_id)
coords <- shp@polygons[[1]]@Polygons[[1]]@coords
Pl <- Polygon(coords)
Pls <- Polygons(list(Pl),ID=region_id)
return(Pls)
}
# Get all polygons and put in SpatialPolygons object
Pls <- NULL
for (i in 1:length(wine_region_shp)) {
Pls <- c(Pls,extract_coords(wine_region_shp[[i]]))
}
SPls <- SpatialPolygons(Pls)
# Data to put in SpatialPolygonsDataFrame
sp_data <- data.frame(1:length(SPls), region_data$avg_rating, row.names=region_data$region_id)
names(sp_data) <- c("region_id","avg_rating")
# Create the SpatialPolygonsDataFrame
sp_file <- SpatialPolygonsDataFrame(SPls, sp_data)
sp_data
headsp_data)
head(sp_data)
# Function to extract ava_id and coords from geojson
extract_coords <- function(shp,region_id) {
coords <- shp@polygons[[1]]@Polygons[[1]]@coords
Pl <- Polygon(coords)
Pls <- Polygons(list(Pl),ID=region_id)
return(Pls)
}
# Get all polygons and put in SpatialPolygons object
Pls <- NULL
for (i in 1:length(wine_region_shp)) {
Pls <- c(Pls,extract_coords(wine_region_shp[[i]],i))
}
SPls <- SpatialPolygons(Pls)
# Data to put in SpatialPolygonsDataFrame
sp_data <- data.frame(1:length(SPls), region_data$avg_rating, row.names=region_data$region_id)
names(sp_data) <- c("region_id","avg_rating")
# Create the SpatialPolygonsDataFrame
sp_file <- SpatialPolygonsDataFrame(SPls, sp_data)
# Write the SpatialPolygonsDataFrame to a shapefile
writeOGR(obj=sp_file, dsn="./data/shapefile", driver="ESRI Shapefile", layer="regions")
